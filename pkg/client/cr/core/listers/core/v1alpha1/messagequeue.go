/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/FujitsuResearch/data-sharing-controllers-on-k8s/pkg/apis/cr/core/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MessageQueueLister helps list MessageQueues.
// All objects returned here must be treated as read-only.
type MessageQueueLister interface {
	// List lists all MessageQueues in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MessageQueue, err error)
	// MessageQueues returns an object that can list and get MessageQueues.
	MessageQueues(namespace string) MessageQueueNamespaceLister
	MessageQueueListerExpansion
}

// messageQueueLister implements the MessageQueueLister interface.
type messageQueueLister struct {
	indexer cache.Indexer
}

// NewMessageQueueLister returns a new MessageQueueLister.
func NewMessageQueueLister(indexer cache.Indexer) MessageQueueLister {
	return &messageQueueLister{indexer: indexer}
}

// List lists all MessageQueues in the indexer.
func (s *messageQueueLister) List(selector labels.Selector) (ret []*v1alpha1.MessageQueue, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MessageQueue))
	})
	return ret, err
}

// MessageQueues returns an object that can list and get MessageQueues.
func (s *messageQueueLister) MessageQueues(namespace string) MessageQueueNamespaceLister {
	return messageQueueNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MessageQueueNamespaceLister helps list and get MessageQueues.
// All objects returned here must be treated as read-only.
type MessageQueueNamespaceLister interface {
	// List lists all MessageQueues in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MessageQueue, err error)
	// Get retrieves the MessageQueue from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MessageQueue, error)
	MessageQueueNamespaceListerExpansion
}

// messageQueueNamespaceLister implements the MessageQueueNamespaceLister
// interface.
type messageQueueNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MessageQueues in the indexer for a given namespace.
func (s messageQueueNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MessageQueue, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MessageQueue))
	})
	return ret, err
}

// Get retrieves the MessageQueue from the indexer for a given namespace and name.
func (s messageQueueNamespaceLister) Get(name string) (*v1alpha1.MessageQueue, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("messagequeue"), name)
	}
	return obj.(*v1alpha1.MessageQueue), nil
}
