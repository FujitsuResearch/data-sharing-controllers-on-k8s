// Copyright (c) 2022 Fujitsu Limited

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.20.0
// source: pkg/apis/grpc/volumecontrol/v1alpha1/volumectl.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExternalAllowedScript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbsolutePath              string `protobuf:"bytes,1,opt,name=absolute_path,json=absolutePath,proto3" json:"absolute_path,omitempty"`
	Writable                  bool   `protobuf:"varint,2,opt,name=writable,proto3" json:"writable,omitempty"`
	RelativePathToInitWorkDir string `protobuf:"bytes,3,opt,name=relative_path_to_init_work_dir,json=relativePathToInitWorkDir,proto3" json:"relative_path_to_init_work_dir,omitempty"`
}

func (x *ExternalAllowedScript) Reset() {
	*x = ExternalAllowedScript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalAllowedScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalAllowedScript) ProtoMessage() {}

func (x *ExternalAllowedScript) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalAllowedScript.ProtoReflect.Descriptor instead.
func (*ExternalAllowedScript) Descriptor() ([]byte, []int) {
	return file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDescGZIP(), []int{0}
}

func (x *ExternalAllowedScript) GetAbsolutePath() string {
	if x != nil {
		return x.AbsolutePath
	}
	return ""
}

func (x *ExternalAllowedScript) GetWritable() bool {
	if x != nil {
		return x.Writable
	}
	return false
}

func (x *ExternalAllowedScript) GetRelativePathToInitWorkDir() string {
	if x != nil {
		return x.RelativePathToInitWorkDir
	}
	return ""
}

type ExternalAllowedExecutable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandAbsolutePath               string                   `protobuf:"bytes,1,opt,name=command_absolute_path,json=commandAbsolutePath,proto3" json:"command_absolute_path,omitempty"`
	WithResidentCommandAbsolutePath   string                   `protobuf:"bytes,2,opt,name=with_resident_command_absolute_path,json=withResidentCommandAbsolutePath,proto3" json:"with_resident_command_absolute_path,omitempty"`
	Writable                          bool                     `protobuf:"varint,3,opt,name=writable,proto3" json:"writable,omitempty"`
	AreAllProcessesAllowedInNamespace bool                     `protobuf:"varint,4,opt,name=are_all_processes_allowed_in_namespace,json=areAllProcessesAllowedInNamespace,proto3" json:"are_all_processes_allowed_in_namespace,omitempty"`
	IsHostProcess                     bool                     `protobuf:"varint,5,opt,name=is_host_process,json=isHostProcess,proto3" json:"is_host_process,omitempty"`
	MountNamespaceId                  string                   `protobuf:"bytes,6,opt,name=mount_namespace_id,json=mountNamespaceId,proto3" json:"mount_namespace_id,omitempty"`
	ExternalAllowedScripts            []*ExternalAllowedScript `protobuf:"bytes,7,rep,name=external_allowed_scripts,json=externalAllowedScripts,proto3" json:"external_allowed_scripts,omitempty"`
}

func (x *ExternalAllowedExecutable) Reset() {
	*x = ExternalAllowedExecutable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalAllowedExecutable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalAllowedExecutable) ProtoMessage() {}

func (x *ExternalAllowedExecutable) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalAllowedExecutable.ProtoReflect.Descriptor instead.
func (*ExternalAllowedExecutable) Descriptor() ([]byte, []int) {
	return file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDescGZIP(), []int{1}
}

func (x *ExternalAllowedExecutable) GetCommandAbsolutePath() string {
	if x != nil {
		return x.CommandAbsolutePath
	}
	return ""
}

func (x *ExternalAllowedExecutable) GetWithResidentCommandAbsolutePath() string {
	if x != nil {
		return x.WithResidentCommandAbsolutePath
	}
	return ""
}

func (x *ExternalAllowedExecutable) GetWritable() bool {
	if x != nil {
		return x.Writable
	}
	return false
}

func (x *ExternalAllowedExecutable) GetAreAllProcessesAllowedInNamespace() bool {
	if x != nil {
		return x.AreAllProcessesAllowedInNamespace
	}
	return false
}

func (x *ExternalAllowedExecutable) GetIsHostProcess() bool {
	if x != nil {
		return x.IsHostProcess
	}
	return false
}

func (x *ExternalAllowedExecutable) GetMountNamespaceId() string {
	if x != nil {
		return x.MountNamespaceId
	}
	return ""
}

func (x *ExternalAllowedExecutable) GetExternalAllowedScripts() []*ExternalAllowedScript {
	if x != nil {
		return x.ExternalAllowedScripts
	}
	return nil
}

type InitializeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FuseSourcePath             string                       `protobuf:"bytes,1,opt,name=fuse_source_path,json=fuseSourcePath,proto3" json:"fuse_source_path,omitempty"`
	ExternalAllowedExecutables []*ExternalAllowedExecutable `protobuf:"bytes,2,rep,name=external_allowed_executables,json=externalAllowedExecutables,proto3" json:"external_allowed_executables,omitempty"`
	CsiVolumeHandle            string                       `protobuf:"bytes,3,opt,name=csi_volume_handle,json=csiVolumeHandle,proto3" json:"csi_volume_handle,omitempty"`
	LocalFuseMountsHostRootDir string                       `protobuf:"bytes,4,opt,name=local_fuse_mounts_host_root_dir,json=localFuseMountsHostRootDir,proto3" json:"local_fuse_mounts_host_root_dir,omitempty"`
	DisableUsageControl        bool                         `protobuf:"varint,5,opt,name=disable_usage_control,json=disableUsageControl,proto3" json:"disable_usage_control,omitempty"`
}

func (x *InitializeRequest) Reset() {
	*x = InitializeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeRequest) ProtoMessage() {}

func (x *InitializeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeRequest.ProtoReflect.Descriptor instead.
func (*InitializeRequest) Descriptor() ([]byte, []int) {
	return file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDescGZIP(), []int{2}
}

func (x *InitializeRequest) GetFuseSourcePath() string {
	if x != nil {
		return x.FuseSourcePath
	}
	return ""
}

func (x *InitializeRequest) GetExternalAllowedExecutables() []*ExternalAllowedExecutable {
	if x != nil {
		return x.ExternalAllowedExecutables
	}
	return nil
}

func (x *InitializeRequest) GetCsiVolumeHandle() string {
	if x != nil {
		return x.CsiVolumeHandle
	}
	return ""
}

func (x *InitializeRequest) GetLocalFuseMountsHostRootDir() string {
	if x != nil {
		return x.LocalFuseMountsHostRootDir
	}
	return ""
}

func (x *InitializeRequest) GetDisableUsageControl() bool {
	if x != nil {
		return x.DisableUsageControl
	}
	return false
}

type InitializeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FuseMountPointDir string `protobuf:"bytes,1,opt,name=fuse_mount_point_dir,json=fuseMountPointDir,proto3" json:"fuse_mount_point_dir,omitempty"`
}

func (x *InitializeResponse) Reset() {
	*x = InitializeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeResponse) ProtoMessage() {}

func (x *InitializeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeResponse.ProtoReflect.Descriptor instead.
func (*InitializeResponse) Descriptor() ([]byte, []int) {
	return file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDescGZIP(), []int{3}
}

func (x *InitializeResponse) GetFuseMountPointDir() string {
	if x != nil {
		return x.FuseMountPointDir
	}
	return ""
}

type FinalizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FuseMountPointDir string `protobuf:"bytes,1,opt,name=fuse_mount_point_dir,json=fuseMountPointDir,proto3" json:"fuse_mount_point_dir,omitempty"`
	Force             bool   `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *FinalizeRequest) Reset() {
	*x = FinalizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeRequest) ProtoMessage() {}

func (x *FinalizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeRequest.ProtoReflect.Descriptor instead.
func (*FinalizeRequest) Descriptor() ([]byte, []int) {
	return file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDescGZIP(), []int{4}
}

func (x *FinalizeRequest) GetFuseMountPointDir() string {
	if x != nil {
		return x.FuseMountPointDir
	}
	return ""
}

func (x *FinalizeRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type FinalizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FinalizeResponse) Reset() {
	*x = FinalizeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeResponse) ProtoMessage() {}

func (x *FinalizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeResponse.ProtoReflect.Descriptor instead.
func (*FinalizeResponse) Descriptor() ([]byte, []int) {
	return file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDescGZIP(), []int{5}
}

type Script struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Checksum                  []byte `protobuf:"bytes,1,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Writable                  bool   `protobuf:"varint,2,opt,name=writable,proto3" json:"writable,omitempty"`
	RelativePathToInitWorkDir string `protobuf:"bytes,3,opt,name=relative_path_to_init_work_dir,json=relativePathToInitWorkDir,proto3" json:"relative_path_to_init_work_dir,omitempty"`
}

func (x *Script) Reset() {
	*x = Script{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Script) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Script) ProtoMessage() {}

func (x *Script) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Script.ProtoReflect.Descriptor instead.
func (*Script) Descriptor() ([]byte, []int) {
	return file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDescGZIP(), []int{6}
}

func (x *Script) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

func (x *Script) GetWritable() bool {
	if x != nil {
		return x.Writable
	}
	return false
}

func (x *Script) GetRelativePathToInitWorkDir() string {
	if x != nil {
		return x.RelativePathToInitWorkDir
	}
	return ""
}

type Executable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Checksum []byte             `protobuf:"bytes,1,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Writable bool               `protobuf:"varint,2,opt,name=writable,proto3" json:"writable,omitempty"`
	Scripts  map[string]*Script `protobuf:"bytes,3,rep,name=scripts,proto3" json:"scripts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Executable) Reset() {
	*x = Executable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Executable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Executable) ProtoMessage() {}

func (x *Executable) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Executable.ProtoReflect.Descriptor instead.
func (*Executable) Descriptor() ([]byte, []int) {
	return file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDescGZIP(), []int{7}
}

func (x *Executable) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

func (x *Executable) GetWritable() bool {
	if x != nil {
		return x.Writable
	}
	return false
}

func (x *Executable) GetScripts() map[string]*Script {
	if x != nil {
		return x.Scripts
	}
	return nil
}

type MessageQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Brokers                        []string `protobuf:"bytes,1,rep,name=brokers,proto3" json:"brokers,omitempty"`
	User                           string   `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Password                       string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Topic                          string   `protobuf:"bytes,4,opt,name=topic,proto3" json:"topic,omitempty"`
	CompressionCodec               string   `protobuf:"bytes,5,opt,name=compression_codec,json=compressionCodec,proto3" json:"compression_codec,omitempty"`
	MaxBatchBytes                  string   `protobuf:"bytes,6,opt,name=max_batch_bytes,json=maxBatchBytes,proto3" json:"max_batch_bytes,omitempty"`
	UpdatePublishChannelBufferSize string   `protobuf:"bytes,7,opt,name=update_publish_channel_buffer_size,json=updatePublishChannelBufferSize,proto3" json:"update_publish_channel_buffer_size,omitempty"`
}

func (x *MessageQueue) Reset() {
	*x = MessageQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageQueue) ProtoMessage() {}

func (x *MessageQueue) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageQueue.ProtoReflect.Descriptor instead.
func (*MessageQueue) Descriptor() ([]byte, []int) {
	return file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDescGZIP(), []int{8}
}

func (x *MessageQueue) GetBrokers() []string {
	if x != nil {
		return x.Brokers
	}
	return nil
}

func (x *MessageQueue) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *MessageQueue) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *MessageQueue) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *MessageQueue) GetCompressionCodec() string {
	if x != nil {
		return x.CompressionCodec
	}
	return ""
}

func (x *MessageQueue) GetMaxBatchBytes() string {
	if x != nil {
		return x.MaxBatchBytes
	}
	return ""
}

func (x *MessageQueue) GetUpdatePublishChannelBufferSize() string {
	if x != nil {
		return x.UpdatePublishChannelBufferSize
	}
	return ""
}

type StartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodNamespace                string                 `protobuf:"bytes,1,opt,name=pod_namespace,json=podNamespace,proto3" json:"pod_namespace,omitempty"`
	PodName                     string                 `protobuf:"bytes,2,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	DataContainerName           string                 `protobuf:"bytes,3,opt,name=data_container_name,json=dataContainerName,proto3" json:"data_container_name,omitempty"`
	PvcKey                      string                 `protobuf:"bytes,4,opt,name=pvc_key,json=pvcKey,proto3" json:"pvc_key,omitempty"`
	AllowedExecutables          map[string]*Executable `protobuf:"bytes,5,rep,name=allowed_executables,json=allowedExecutables,proto3" json:"allowed_executables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MessageQueueUpdatePublisher *MessageQueue          `protobuf:"bytes,6,opt,name=message_queue_update_publisher,json=messageQueueUpdatePublisher,proto3" json:"message_queue_update_publisher,omitempty"`
}

func (x *StartRequest) Reset() {
	*x = StartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRequest) ProtoMessage() {}

func (x *StartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRequest.ProtoReflect.Descriptor instead.
func (*StartRequest) Descriptor() ([]byte, []int) {
	return file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDescGZIP(), []int{9}
}

func (x *StartRequest) GetPodNamespace() string {
	if x != nil {
		return x.PodNamespace
	}
	return ""
}

func (x *StartRequest) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *StartRequest) GetDataContainerName() string {
	if x != nil {
		return x.DataContainerName
	}
	return ""
}

func (x *StartRequest) GetPvcKey() string {
	if x != nil {
		return x.PvcKey
	}
	return ""
}

func (x *StartRequest) GetAllowedExecutables() map[string]*Executable {
	if x != nil {
		return x.AllowedExecutables
	}
	return nil
}

func (x *StartRequest) GetMessageQueueUpdatePublisher() *MessageQueue {
	if x != nil {
		return x.MessageQueueUpdatePublisher
	}
	return nil
}

type StartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MountPoint                   string `protobuf:"bytes,1,opt,name=mount_point,json=mountPoint,proto3" json:"mount_point,omitempty"`
	UsageControlEnabled          bool   `protobuf:"varint,2,opt,name=usage_control_enabled,json=usageControlEnabled,proto3" json:"usage_control_enabled,omitempty"`
	MessageQueuePublisherEnabled bool   `protobuf:"varint,3,opt,name=message_queue_publisher_enabled,json=messageQueuePublisherEnabled,proto3" json:"message_queue_publisher_enabled,omitempty"`
}

func (x *StartResponse) Reset() {
	*x = StartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartResponse) ProtoMessage() {}

func (x *StartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartResponse.ProtoReflect.Descriptor instead.
func (*StartResponse) Descriptor() ([]byte, []int) {
	return file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDescGZIP(), []int{10}
}

func (x *StartResponse) GetMountPoint() string {
	if x != nil {
		return x.MountPoint
	}
	return ""
}

func (x *StartResponse) GetUsageControlEnabled() bool {
	if x != nil {
		return x.UsageControlEnabled
	}
	return false
}

func (x *StartResponse) GetMessageQueuePublisherEnabled() bool {
	if x != nil {
		return x.MessageQueuePublisherEnabled
	}
	return false
}

type ExecutablePaths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paths []string `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *ExecutablePaths) Reset() {
	*x = ExecutablePaths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutablePaths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutablePaths) ProtoMessage() {}

func (x *ExecutablePaths) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutablePaths.ProtoReflect.Descriptor instead.
func (*ExecutablePaths) Descriptor() ([]byte, []int) {
	return file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDescGZIP(), []int{11}
}

func (x *ExecutablePaths) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

type StopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodNamespace                string                      `protobuf:"bytes,1,opt,name=pod_namespace,json=podNamespace,proto3" json:"pod_namespace,omitempty"`
	PodName                     string                      `protobuf:"bytes,2,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	MountPointToExecutablePaths map[string]*ExecutablePaths `protobuf:"bytes,3,rep,name=mount_point_to_executable_paths,json=mountPointToExecutablePaths,proto3" json:"mount_point_to_executable_paths,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MountPoint                  string                      `protobuf:"bytes,4,opt,name=mount_point,json=mountPoint,proto3" json:"mount_point,omitempty"`
}

func (x *StopRequest) Reset() {
	*x = StopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRequest) ProtoMessage() {}

func (x *StopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRequest.ProtoReflect.Descriptor instead.
func (*StopRequest) Descriptor() ([]byte, []int) {
	return file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDescGZIP(), []int{12}
}

func (x *StopRequest) GetPodNamespace() string {
	if x != nil {
		return x.PodNamespace
	}
	return ""
}

func (x *StopRequest) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *StopRequest) GetMountPointToExecutablePaths() map[string]*ExecutablePaths {
	if x != nil {
		return x.MountPointToExecutablePaths
	}
	return nil
}

func (x *StopRequest) GetMountPoint() string {
	if x != nil {
		return x.MountPoint
	}
	return ""
}

type StopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopResponse) Reset() {
	*x = StopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopResponse) ProtoMessage() {}

func (x *StopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopResponse.ProtoReflect.Descriptor instead.
func (*StopResponse) Descriptor() ([]byte, []int) {
	return file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDescGZIP(), []int{13}
}

type ExecutablesDiffs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddedAndUpdated map[string]*Executable `protobuf:"bytes,1,rep,name=added_and_updated,json=addedAndUpdated,proto3" json:"added_and_updated,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DeletedPaths    []string               `protobuf:"bytes,2,rep,name=deleted_paths,json=deletedPaths,proto3" json:"deleted_paths,omitempty"`
}

func (x *ExecutablesDiffs) Reset() {
	*x = ExecutablesDiffs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutablesDiffs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutablesDiffs) ProtoMessage() {}

func (x *ExecutablesDiffs) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutablesDiffs.ProtoReflect.Descriptor instead.
func (*ExecutablesDiffs) Descriptor() ([]byte, []int) {
	return file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDescGZIP(), []int{14}
}

func (x *ExecutablesDiffs) GetAddedAndUpdated() map[string]*Executable {
	if x != nil {
		return x.AddedAndUpdated
	}
	return nil
}

func (x *ExecutablesDiffs) GetDeletedPaths() []string {
	if x != nil {
		return x.DeletedPaths
	}
	return nil
}

type UpdateAllowedExecutablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodNamespace     string                       `protobuf:"bytes,1,opt,name=pod_namespace,json=podNamespace,proto3" json:"pod_namespace,omitempty"`
	PodName          string                       `protobuf:"bytes,2,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	ExecutablesDiffs map[string]*ExecutablesDiffs `protobuf:"bytes,3,rep,name=executables_diffs,json=executablesDiffs,proto3" json:"executables_diffs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateAllowedExecutablesRequest) Reset() {
	*x = UpdateAllowedExecutablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAllowedExecutablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAllowedExecutablesRequest) ProtoMessage() {}

func (x *UpdateAllowedExecutablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAllowedExecutablesRequest.ProtoReflect.Descriptor instead.
func (*UpdateAllowedExecutablesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateAllowedExecutablesRequest) GetPodNamespace() string {
	if x != nil {
		return x.PodNamespace
	}
	return ""
}

func (x *UpdateAllowedExecutablesRequest) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *UpdateAllowedExecutablesRequest) GetExecutablesDiffs() map[string]*ExecutablesDiffs {
	if x != nil {
		return x.ExecutablesDiffs
	}
	return nil
}

type UpdateAllowedExecutablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PvcKeyToMountPoint map[string]string `protobuf:"bytes,1,rep,name=pvc_key_to_mount_point,json=pvcKeyToMountPoint,proto3" json:"pvc_key_to_mount_point,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateAllowedExecutablesResponse) Reset() {
	*x = UpdateAllowedExecutablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAllowedExecutablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAllowedExecutablesResponse) ProtoMessage() {}

func (x *UpdateAllowedExecutablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAllowedExecutablesResponse.ProtoReflect.Descriptor instead.
func (*UpdateAllowedExecutablesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateAllowedExecutablesResponse) GetPvcKeyToMountPoint() map[string]string {
	if x != nil {
		return x.PvcKeyToMountPoint
	}
	return nil
}

type UpdateMessageQueueConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodNamespace      string                   `protobuf:"bytes,1,opt,name=pod_namespace,json=podNamespace,proto3" json:"pod_namespace,omitempty"`
	PodName           string                   `protobuf:"bytes,2,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	MessageQueueDiffs map[string]*MessageQueue `protobuf:"bytes,3,rep,name=message_queue_diffs,json=messageQueueDiffs,proto3" json:"message_queue_diffs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateMessageQueueConfigRequest) Reset() {
	*x = UpdateMessageQueueConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMessageQueueConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMessageQueueConfigRequest) ProtoMessage() {}

func (x *UpdateMessageQueueConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMessageQueueConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateMessageQueueConfigRequest) Descriptor() ([]byte, []int) {
	return file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateMessageQueueConfigRequest) GetPodNamespace() string {
	if x != nil {
		return x.PodNamespace
	}
	return ""
}

func (x *UpdateMessageQueueConfigRequest) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *UpdateMessageQueueConfigRequest) GetMessageQueueDiffs() map[string]*MessageQueue {
	if x != nil {
		return x.MessageQueueDiffs
	}
	return nil
}

type UpdateMessageQueueConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PvcKeyToMountPoint map[string]string `protobuf:"bytes,1,rep,name=pvc_key_to_mount_point,json=pvcKeyToMountPoint,proto3" json:"pvc_key_to_mount_point,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateMessageQueueConfigResponse) Reset() {
	*x = UpdateMessageQueueConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMessageQueueConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMessageQueueConfigResponse) ProtoMessage() {}

func (x *UpdateMessageQueueConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMessageQueueConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateMessageQueueConfigResponse) Descriptor() ([]byte, []int) {
	return file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateMessageQueueConfigResponse) GetPvcKeyToMountPoint() map[string]string {
	if x != nil {
		return x.PvcKeyToMountPoint
	}
	return nil
}

var File_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto protoreflect.FileDescriptor

var file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDesc = []byte{
	0x0a, 0x34, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x63, 0x74, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x01, 0x0a, 0x15, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x41, 0x0a, 0x1e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x54, 0x6f, 0x49, 0x6e, 0x69, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x44, 0x69, 0x72, 0x22, 0xb4, 0x03, 0x0a, 0x19, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x62,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4c, 0x0a, 0x23, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72,
	0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f,
	0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1f, 0x77, 0x69, 0x74, 0x68, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x51, 0x0a, 0x26, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x21, 0x61, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x49, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73,
	0x48, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x18, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x52, 0x16, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x22, 0xc0, 0x02, 0x0a, 0x11,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x75, 0x73,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x5c, 0x0a, 0x1c, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x1a, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x73, 0x69,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x73, 0x69, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x1f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x66,
	0x75, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x75, 0x73, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x48,
	0x6f, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0x45,
	0x0a, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x66, 0x75, 0x73, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x44, 0x69, 0x72, 0x22, 0x58, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x75, 0x73, 0x65,
	0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x75, 0x73, 0x65, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22,
	0x12, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x72,
	0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x77, 0x72,
	0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x1e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x54, 0x6f, 0x49, 0x6e,
	0x69, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x72, 0x22, 0xbd, 0x01, 0x0a, 0x0a, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x32, 0x0a, 0x07, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x73, 0x1a, 0x43, 0x0a, 0x0c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8f, 0x02, 0x0a, 0x0c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x74, 0x63, 0x68, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x4a, 0x0a, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x97, 0x03, 0x0a, 0x0c,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x61, 0x74, 0x61, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x76, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x76, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x56, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x52, 0x0a,
	0x1e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x52, 0x1b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x1a, 0x52, 0x0a, 0x17, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xab, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x75, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x1f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x22, 0x27, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x22, 0xc5, 0x02, 0x0a,
	0x0b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x73, 0x0a, 0x1f,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x1b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x54, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x1a, 0x60, 0x0a, 0x20, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x54, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x0e, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x10, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x44, 0x69, 0x66, 0x66, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x61, 0x64, 0x64,
	0x65, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x44, 0x69, 0x66, 0x66, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x65, 0x64, 0x41, 0x6e, 0x64,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x61, 0x64,
	0x64, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x1a, 0x4f, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x9e, 0x02, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x44, 0x69, 0x66, 0x66, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x44, 0x69, 0x66, 0x66, 0x73, 0x1a, 0x56, 0x0a, 0x15,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x44, 0x69, 0x66, 0x66, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x44, 0x69, 0x66, 0x66, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xd8, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x16, 0x70, 0x76, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x76, 0x63,
	0x4b, 0x65, 0x79, 0x54, 0x6f, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x70, 0x76, 0x63, 0x4b, 0x65, 0x79, 0x54, 0x6f, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x45, 0x0a, 0x17, 0x50, 0x76, 0x63, 0x4b,
	0x65, 0x79, 0x54, 0x6f, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x9f, 0x02, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x67, 0x0a, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44,
	0x69, 0x66, 0x66, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x69, 0x66, 0x66, 0x73, 0x1a, 0x53, 0x0a, 0x16,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x69, 0x66, 0x66,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xd8, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x16, 0x70, 0x76, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x76, 0x63, 0x4b, 0x65, 0x79,
	0x54, 0x6f, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x12, 0x70, 0x76, 0x63, 0x4b, 0x65, 0x79, 0x54, 0x6f, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x45, 0x0a, 0x17, 0x50, 0x76, 0x63, 0x4b, 0x65, 0x79, 0x54,
	0x6f, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x86, 0x03, 0x0a,
	0x0d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x35,
	0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x2e, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x12, 0x10, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x0d, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23,
	0x0a, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x0c, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x20, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x20, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x26, 0x5a, 0x24, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDescOnce sync.Once
	file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDescData = file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDesc
)

func file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDescGZIP() []byte {
	file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDescOnce.Do(func() {
		file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDescData)
	})
	return file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDescData
}

var file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_goTypes = []interface{}{
	(*ExternalAllowedScript)(nil),            // 0: ExternalAllowedScript
	(*ExternalAllowedExecutable)(nil),        // 1: ExternalAllowedExecutable
	(*InitializeRequest)(nil),                // 2: InitializeRequest
	(*InitializeResponse)(nil),               // 3: InitializeResponse
	(*FinalizeRequest)(nil),                  // 4: FinalizeRequest
	(*FinalizeResponse)(nil),                 // 5: FinalizeResponse
	(*Script)(nil),                           // 6: Script
	(*Executable)(nil),                       // 7: Executable
	(*MessageQueue)(nil),                     // 8: MessageQueue
	(*StartRequest)(nil),                     // 9: StartRequest
	(*StartResponse)(nil),                    // 10: StartResponse
	(*ExecutablePaths)(nil),                  // 11: ExecutablePaths
	(*StopRequest)(nil),                      // 12: StopRequest
	(*StopResponse)(nil),                     // 13: StopResponse
	(*ExecutablesDiffs)(nil),                 // 14: ExecutablesDiffs
	(*UpdateAllowedExecutablesRequest)(nil),  // 15: UpdateAllowedExecutablesRequest
	(*UpdateAllowedExecutablesResponse)(nil), // 16: UpdateAllowedExecutablesResponse
	(*UpdateMessageQueueConfigRequest)(nil),  // 17: UpdateMessageQueueConfigRequest
	(*UpdateMessageQueueConfigResponse)(nil), // 18: UpdateMessageQueueConfigResponse
	nil,                                      // 19: Executable.ScriptsEntry
	nil,                                      // 20: StartRequest.AllowedExecutablesEntry
	nil,                                      // 21: StopRequest.MountPointToExecutablePathsEntry
	nil,                                      // 22: ExecutablesDiffs.AddedAndUpdatedEntry
	nil,                                      // 23: UpdateAllowedExecutablesRequest.ExecutablesDiffsEntry
	nil,                                      // 24: UpdateAllowedExecutablesResponse.PvcKeyToMountPointEntry
	nil,                                      // 25: UpdateMessageQueueConfigRequest.MessageQueueDiffsEntry
	nil,                                      // 26: UpdateMessageQueueConfigResponse.PvcKeyToMountPointEntry
}
var file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_depIdxs = []int32{
	0,  // 0: ExternalAllowedExecutable.external_allowed_scripts:type_name -> ExternalAllowedScript
	1,  // 1: InitializeRequest.external_allowed_executables:type_name -> ExternalAllowedExecutable
	19, // 2: Executable.scripts:type_name -> Executable.ScriptsEntry
	20, // 3: StartRequest.allowed_executables:type_name -> StartRequest.AllowedExecutablesEntry
	8,  // 4: StartRequest.message_queue_update_publisher:type_name -> MessageQueue
	21, // 5: StopRequest.mount_point_to_executable_paths:type_name -> StopRequest.MountPointToExecutablePathsEntry
	22, // 6: ExecutablesDiffs.added_and_updated:type_name -> ExecutablesDiffs.AddedAndUpdatedEntry
	23, // 7: UpdateAllowedExecutablesRequest.executables_diffs:type_name -> UpdateAllowedExecutablesRequest.ExecutablesDiffsEntry
	24, // 8: UpdateAllowedExecutablesResponse.pvc_key_to_mount_point:type_name -> UpdateAllowedExecutablesResponse.PvcKeyToMountPointEntry
	25, // 9: UpdateMessageQueueConfigRequest.message_queue_diffs:type_name -> UpdateMessageQueueConfigRequest.MessageQueueDiffsEntry
	26, // 10: UpdateMessageQueueConfigResponse.pvc_key_to_mount_point:type_name -> UpdateMessageQueueConfigResponse.PvcKeyToMountPointEntry
	6,  // 11: Executable.ScriptsEntry.value:type_name -> Script
	7,  // 12: StartRequest.AllowedExecutablesEntry.value:type_name -> Executable
	11, // 13: StopRequest.MountPointToExecutablePathsEntry.value:type_name -> ExecutablePaths
	7,  // 14: ExecutablesDiffs.AddedAndUpdatedEntry.value:type_name -> Executable
	14, // 15: UpdateAllowedExecutablesRequest.ExecutablesDiffsEntry.value:type_name -> ExecutablesDiffs
	8,  // 16: UpdateMessageQueueConfigRequest.MessageQueueDiffsEntry.value:type_name -> MessageQueue
	2,  // 17: VolumeControl.Initialize:input_type -> InitializeRequest
	4,  // 18: VolumeControl.Finalize:input_type -> FinalizeRequest
	9,  // 19: VolumeControl.Start:input_type -> StartRequest
	12, // 20: VolumeControl.Stop:input_type -> StopRequest
	15, // 21: VolumeControl.UpdateAllowedExecutables:input_type -> UpdateAllowedExecutablesRequest
	17, // 22: VolumeControl.UpdateMessageQueueConfig:input_type -> UpdateMessageQueueConfigRequest
	3,  // 23: VolumeControl.Initialize:output_type -> InitializeResponse
	5,  // 24: VolumeControl.Finalize:output_type -> FinalizeResponse
	10, // 25: VolumeControl.Start:output_type -> StartResponse
	13, // 26: VolumeControl.Stop:output_type -> StopResponse
	16, // 27: VolumeControl.UpdateAllowedExecutables:output_type -> UpdateAllowedExecutablesResponse
	18, // 28: VolumeControl.UpdateMessageQueueConfig:output_type -> UpdateMessageQueueConfigResponse
	23, // [23:29] is the sub-list for method output_type
	17, // [17:23] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_init() }
func file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_init() {
	if File_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalAllowedScript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalAllowedExecutable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Script); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Executable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutablePaths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutablesDiffs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAllowedExecutablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAllowedExecutablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMessageQueueConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMessageQueueConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_goTypes,
		DependencyIndexes: file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_depIdxs,
		MessageInfos:      file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_msgTypes,
	}.Build()
	File_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto = out.File
	file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_rawDesc = nil
	file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_goTypes = nil
	file_pkg_apis_grpc_volumecontrol_v1alpha1_volumectl_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VolumeControlClient is the client API for VolumeControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VolumeControlClient interface {
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error)
	Finalize(ctx context.Context, in *FinalizeRequest, opts ...grpc.CallOption) (*FinalizeResponse, error)
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	UpdateAllowedExecutables(ctx context.Context, in *UpdateAllowedExecutablesRequest, opts ...grpc.CallOption) (*UpdateAllowedExecutablesResponse, error)
	UpdateMessageQueueConfig(ctx context.Context, in *UpdateMessageQueueConfigRequest, opts ...grpc.CallOption) (*UpdateMessageQueueConfigResponse, error)
}

type volumeControlClient struct {
	cc grpc.ClientConnInterface
}

func NewVolumeControlClient(cc grpc.ClientConnInterface) VolumeControlClient {
	return &volumeControlClient{cc}
}

func (c *volumeControlClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error) {
	out := new(InitializeResponse)
	err := c.cc.Invoke(ctx, "/VolumeControl/Initialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeControlClient) Finalize(ctx context.Context, in *FinalizeRequest, opts ...grpc.CallOption) (*FinalizeResponse, error) {
	out := new(FinalizeResponse)
	err := c.cc.Invoke(ctx, "/VolumeControl/Finalize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeControlClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/VolumeControl/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeControlClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/VolumeControl/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeControlClient) UpdateAllowedExecutables(ctx context.Context, in *UpdateAllowedExecutablesRequest, opts ...grpc.CallOption) (*UpdateAllowedExecutablesResponse, error) {
	out := new(UpdateAllowedExecutablesResponse)
	err := c.cc.Invoke(ctx, "/VolumeControl/UpdateAllowedExecutables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeControlClient) UpdateMessageQueueConfig(ctx context.Context, in *UpdateMessageQueueConfigRequest, opts ...grpc.CallOption) (*UpdateMessageQueueConfigResponse, error) {
	out := new(UpdateMessageQueueConfigResponse)
	err := c.cc.Invoke(ctx, "/VolumeControl/UpdateMessageQueueConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VolumeControlServer is the server API for VolumeControl service.
type VolumeControlServer interface {
	Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error)
	Finalize(context.Context, *FinalizeRequest) (*FinalizeResponse, error)
	Start(context.Context, *StartRequest) (*StartResponse, error)
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	UpdateAllowedExecutables(context.Context, *UpdateAllowedExecutablesRequest) (*UpdateAllowedExecutablesResponse, error)
	UpdateMessageQueueConfig(context.Context, *UpdateMessageQueueConfigRequest) (*UpdateMessageQueueConfigResponse, error)
}

// UnimplementedVolumeControlServer can be embedded to have forward compatible implementations.
type UnimplementedVolumeControlServer struct {
}

func (*UnimplementedVolumeControlServer) Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (*UnimplementedVolumeControlServer) Finalize(context.Context, *FinalizeRequest) (*FinalizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Finalize not implemented")
}
func (*UnimplementedVolumeControlServer) Start(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedVolumeControlServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedVolumeControlServer) UpdateAllowedExecutables(context.Context, *UpdateAllowedExecutablesRequest) (*UpdateAllowedExecutablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAllowedExecutables not implemented")
}
func (*UnimplementedVolumeControlServer) UpdateMessageQueueConfig(context.Context, *UpdateMessageQueueConfigRequest) (*UpdateMessageQueueConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessageQueueConfig not implemented")
}

func RegisterVolumeControlServer(s *grpc.Server, srv VolumeControlServer) {
	s.RegisterService(&_VolumeControl_serviceDesc, srv)
}

func _VolumeControl_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeControlServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VolumeControl/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeControlServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeControl_Finalize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeControlServer).Finalize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VolumeControl/Finalize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeControlServer).Finalize(ctx, req.(*FinalizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeControl_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeControlServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VolumeControl/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeControlServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeControl_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeControlServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VolumeControl/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeControlServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeControl_UpdateAllowedExecutables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAllowedExecutablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeControlServer).UpdateAllowedExecutables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VolumeControl/UpdateAllowedExecutables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeControlServer).UpdateAllowedExecutables(ctx, req.(*UpdateAllowedExecutablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeControl_UpdateMessageQueueConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMessageQueueConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeControlServer).UpdateMessageQueueConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VolumeControl/UpdateMessageQueueConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeControlServer).UpdateMessageQueueConfig(ctx, req.(*UpdateMessageQueueConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VolumeControl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "VolumeControl",
	HandlerType: (*VolumeControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _VolumeControl_Initialize_Handler,
		},
		{
			MethodName: "Finalize",
			Handler:    _VolumeControl_Finalize_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _VolumeControl_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _VolumeControl_Stop_Handler,
		},
		{
			MethodName: "UpdateAllowedExecutables",
			Handler:    _VolumeControl_UpdateAllowedExecutables_Handler,
		},
		{
			MethodName: "UpdateMessageQueueConfig",
			Handler:    _VolumeControl_UpdateMessageQueueConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apis/grpc/volumecontrol/v1alpha1/volumectl.proto",
}
